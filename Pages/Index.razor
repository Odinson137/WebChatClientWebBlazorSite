@page "/Index"
@using System.Net.Http.Headers;
@using WebChatClientWebSite.Data;
@using WebChatClientWebSite.Models;
@inject HttpClient Http
@inject Blazored.LocalStorage.ILocalStorageService localStorage

<PageTitle>Index</PageTitle>

<div class="header container-fluid">
    <div class="row">
        <div class="d-flex container-fluid col-1 tab selected-tab justify-content-center align-items-center">
            Home
        </div>
        <div class="col">
            <div class="row">
                <div class="d-flex col-1 tab align-items-center">
                    Test
                </div>
            </div>
        </div>
        <div class="d-flex container-fluid col-1 tab justify-content-center align-items-center">
            Yuri
        </div>
    </div>
</div>

<div class="row">
    <div class="chats-side col">
        <div class="title chat-title d-flex justify-content-center align-items-center">
            Chats
        </div>
        <div class="chat-list">
            @if (chats != null)
            {
                @foreach (Chat chat in chats)
                {
                    <TitleChatComponent ChatId="@chat.ChatId" ChatTitle="@chat.Title" OnChatClick="HandleTTitleChatClick" />
                }
            }

        </div>
    </div>

    <div class="chat-menu col-7">
        <div class="title chat-title d-flex justify-content-center align-items-center">
            @if (SelectedChat != null)
            {
                @SelectedChat.Title
            }
        </div>
        <div>
            @if (SelectedChat != null && SelectedChat.Messages != null)
            {
                @foreach (Message message in SelectedChat.Messages)
                {
                    <h3>@message.text</h3>
                }
            }
        </div>
    </div>

    <div class="chat-info col">
        <div class="title chat-title d-flex justify-content-center align-items-center">
            Chat
        </div>
    </div>


</div>



@code {
    ICollection<Chat> chats = null!;
    Chat? SelectedChat { get; set; }

    protected override async Task OnInitializedAsync() => await GetChatsAsync();
    string? id;
    string? token;
    private async Task GetChatsAsync()
    {
        id = await localStorage.GetItemAsync<string>("userId");
        token = await localStorage.GetItemAsync<string>("userToken");

        var request = new HttpRequestMessage(HttpMethod.Get, $"{AppSettings.ApiUrl}/api/Chat/{id}");
        request.Headers.Authorization = new AuthenticationHeaderValue("Bearer", token);
        var response = await Http.SendAsync(request);

        if (response.IsSuccessStatusCode)
        {
            chats = await response.Content.ReadFromJsonAsync<ICollection<Chat>>() ?? new List<Chat>();
        } 
    }

    private async Task HandleTTitleChatClick(int chatId)
    {
        SelectedChat = chats.Where(chat => chat.ChatId == chatId).First();

        if (SelectedChat.Messages == null)
        {
            var request = new HttpRequestMessage(HttpMethod.Get, $"{AppSettings.ApiUrl}/api/Message/{chatId}");
            request.Headers.Authorization = new AuthenticationHeaderValue("Bearer", token);
            var response = await Http.SendAsync(request);

            Console.WriteLine(response);

            if (response.IsSuccessStatusCode)
            {
                if (SelectedChat != null)
                {
                    SelectedChat.Messages = await response.Content.ReadFromJsonAsync<ICollection<Message>>()
                                                                                        ?? new List<Message>();
                    Console.WriteLine(SelectedChat.Messages);
                }
            }
        }
    }


}
